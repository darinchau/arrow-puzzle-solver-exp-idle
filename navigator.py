from solver import take_screenshot, cropReverse, clickReverse
import numpy as np


def compare(arr1: np.ndarray, arr2: np.ndarray):
    if arr1.shape() != arr2.shape():
        return False

    arr1 = arr1.reshape(-1)
    arr2 = arr2.reshape(-1)
    k = 0
    for i in range(arr1.shape()[0]):
        if arr1[i] == arr2[i]:
            k += 1
    return k/arr1.shape()[0] >= 0.9


def print2Darray(im: np.ndarray):
    for i in range(im.shape[0]):
        print("[", end="")
        for j in range(im.shape[1] - 1):
            print(im[i][j], end=", ")
        print(im[i][-1], end="")
        print("]" if i == im.shape[0] - 1 else "],")


def Checker(coordinates: tuple, checker: np.ndarray, Image=None):
    if type(Image) == type(None):
        Image = take_screenshot('screen.png')
    im = cropReverse(coordinates[0], coordinates[1],
                     coordinates[2], coordinates[3], Image)
    im = im[:, :, 0]
    return np.array_equal(im, checker)


def IsOnTheories(Image=None):
    coordinates = (144, 775, 156, 754)
    checker = np.array([[0, 0, 0, 0, 13, 91, 126, 128, 128, 128, 128, 128, 128, 38, 0, 0, 67, 128, 128, 72, 0],
                        [0, 0, 6, 98, 128, 128, 128, 122, 103, 50,
                            9, 0, 0, 0, 0, 0, 0, 73, 128, 128, 65],
                        [0, 41, 125, 128, 128, 108, 24, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 68, 128, 128],
                        [72, 127, 128, 112, 21, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 128],
                        [128, 128, 80, 1, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 8, 128],
                        [128, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 88, 128],
                        [59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 1, 83, 128, 127],
                        [0, 0, 0, 0, 10, 48, 75, 88, 93, 91, 79,
                         57, 21, 0, 0, 0, 0, 83, 128, 128, 53],
                        [0, 9, 79, 128, 128, 128, 128, 128, 128, 128,
                         128, 128, 128, 47, 0, 0, 84, 128, 128, 51, 0],
                        [93, 127, 128, 128, 126, 123, 89, 67, 55, 60,
                         80, 119, 128, 61, 0, 86, 128, 128, 52, 0, 0],
                        [128, 128, 111, 44, 3, 0, 0, 0, 0, 0, 0,
                         89, 128, 61, 81, 128, 128, 54, 0, 0, 0],
                        [120, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 128, 122, 128, 128, 49, 0, 0, 0, 0]])
    return Checker(coordinates, checker, Image)


def IsOnArrowPuzzle(Image=None):
    coordinates = (64, 474, 76, 444)
    checker = np.array([[255, 255, 111, 0, 27, 156, 226, 250, 238, 201, 104, 0, 0, 0, 0, 0, 0, 0, 47, 141, 192, 228, 241, 252, 243, 229, 196, 147, 58, 0],
                        [255, 255, 111, 47, 225, 249, 188, 202, 255, 255, 255, 158, 0, 0, 0, 0,
                            35, 179, 251, 255, 253, 208, 167, 151, 164, 202, 251, 255, 253, 188],
                        [255, 255, 112, 209, 209, 44, 0, 226, 255, 255, 255, 251, 27, 0,
                            0, 74, 232, 255, 255, 221, 69, 0, 0, 0, 0, 0, 58, 211, 255, 255],
                        [255, 255, 188, 229, 23, 0, 0, 242, 255, 255, 255, 254, 30, 0, 54,
                         236, 255, 255, 241, 51, 0, 0, 0, 0, 0, 0, 0, 30, 231, 255],
                        [255, 255, 253, 114, 0, 0, 0, 155, 255, 255, 255, 174, 0, 0, 203,
                         255, 255, 255, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 255],
                        [255, 255, 241, 13, 0, 0, 0, 0, 85, 135, 95, 0, 0, 95, 255,
                         255, 255, 255, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 255],
                        [255, 255, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 175, 255,
                         255, 255, 255, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 255],
                        [255, 255, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 255,
                         255, 255, 255, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 255],
                        [255, 255, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 255,
                         255, 255, 255, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 255],
                        [255, 255, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 255,
                         255, 255, 255, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 255],
                        [255, 255, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 255,
                         255, 255, 255, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 255],
                        [255, 255, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 197, 255, 255, 255, 255, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 255]])
    return Checker(coordinates, checker, Image)


def IsOnStudents(Image=None):
    checker = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [247, 218, 150, 34, 0, 35, 229, 13, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [22, 70, 155, 226, 73, 176, 255, 22, 0, 0, 0,
                         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 72, 226, 254, 255, 22, 0, 0, 0, 0,
                         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 109, 255, 255, 22, 0, 0, 0, 0, 0,
                         29, 250, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 217, 255, 22, 0, 0, 0, 0, 0,
                         64, 255, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 144, 255, 22, 0, 0, 0, 0, 0,
                         95, 255, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 81, 255, 22, 0, 0, 0, 0, 0,
                         158, 255, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 23, 238, 13, 0, 0, 0, 0, 32,
                         240, 255, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 206,
                         255, 255, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [171, 115, 46, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255,
                         255, 255, 255, 255, 255, 255, 99, 0, 0, 0, 0, 0],
                        [255, 255, 255, 226, 153, 30, 0, 0, 0, 0, 0, 22, 22,
                         255, 255, 104, 22, 22, 22, 8, 0, 0, 0, 0, 0],
                        [255, 255, 255, 255, 255, 229, 63, 0, 0, 0, 0, 0,
                         0, 255, 255, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [214, 251, 255, 255, 255, 255, 229, 27, 0, 0, 0,
                         0, 0, 255, 255, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 25, 99, 180, 253, 255, 255, 157, 0, 0, 0, 0,
                         0, 255, 255, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 107, 251, 255, 235, 0, 0, 0, 0, 0,
                         255, 255, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 169, 255, 255, 46, 0, 0, 0, 0,
                         255, 255, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 73, 255, 255, 65, 0, 0, 0, 0,
                         255, 255, 99, 0, 0, 0, 0, 77, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 23, 255, 255, 35, 0, 0, 0, 0,
                         255, 255, 99, 0, 0, 0, 0, 255, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 51, 255, 222, 0, 0, 0, 0, 0,
                         255, 255, 100, 0, 0, 0, 11, 254, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 138, 255, 133, 0, 0, 0, 0, 0, 242, 255, 120, 0, 0, 0, 53, 233, 0, 0, 0, 0]])
    coordinates = (144, 454, 166, 429)
    return Checker(coordinates, checker, Image)


def GiftAvailable(Image=None):
    checker = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 87, 174,
                         215, 230, 199, 134, 48, 4, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 111, 236, 254, 255,
                         255, 255, 255, 255, 249, 198, 44, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 182, 255, 255, 255, 255,
                         255, 255, 255, 255, 255, 255, 241, 58, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167, 255, 255, 255, 255, 255,
                         255, 255, 255, 255, 255, 255, 255, 250, 24, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 251, 255, 255, 255, 249,
                         167, 58, 40, 99, 228, 255, 255, 255, 255, 227, 14, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 1, 204, 255, 255, 255, 245, 72,
                         1, 0, 0, 0, 15, 163, 254, 255, 255, 255, 134, 1, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 33, 255, 255, 255, 255, 92, 0,
                         0, 0, 0, 0, 0, 10, 198, 255, 255, 255, 247, 48, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 68, 255, 255, 255, 255, 16, 0,
                         0, 0, 0, 0, 0, 0, 34, 242, 255, 255, 255, 193, 1],
                        [0, 0, 0, 0, 0, 0, 0, 0, 82, 255, 255, 255, 255, 2, 0,
                         0, 0, 0, 0, 0, 0, 0, 106, 255, 255, 255, 252, 66],
                        [0, 0, 0, 0, 0, 0, 0, 0, 79, 255, 255, 255, 255, 6, 0,
                         0, 0, 0, 0, 0, 0, 0, 15, 240, 255, 255, 255, 186],
                        [0, 0, 0, 0, 0, 0, 0, 0, 56, 255, 255, 255, 255, 31,
                         0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 254, 255, 255, 255],
                        [0, 0, 0, 0, 0, 0, 0, 0, 15, 250, 255, 255, 255, 177,
                         6, 0, 0, 0, 0, 0, 0, 0, 0, 7, 239, 255, 255, 255],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 255, 255, 255, 254,
                         166, 15, 0, 0, 0, 0, 0, 0, 0, 0, 164, 255, 255, 255],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 236, 255, 255, 255, 254,
                         220, 46, 1, 0, 0, 0, 0, 0, 0, 32, 253, 255, 255],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 252, 255, 255, 255, 255, 254, 168, 5, 0, 0, 0, 0, 0, 6, 228, 255, 255]])
    coordinates = (1106, 428, 1126, 400)
    return Checker(coordinates, checker, Image)


def IsOnMain(Image=None):
    return GiftAvailable(Image) and not IsOnStudents(Image) and not IsOnTheories(Image)


def CheckLocation():
    Image = take_screenshot('screen.png')
    if IsOnTheories(Image):
        return "theories"
    if IsOnArrowPuzzle(Image):
        return "arrow"
    if IsOnStudents(Image):
        return "students"
    if IsOnMain(Image):
        return "main"
    return "not sure"


# Attempts to navigate to a given location. Returns true if we successfully arrived
def goto(destination):
    if destination not in ["theories", "students", "main", "arrow"]:
        print("Wrong destination variables: " + destination)
        raise AssertionError("Wrong destination variables: " + destination)

    location = CheckLocation()
    orig = location
    if location == destination:
        return True

    print("Going from " + orig + " to " + destination)
    clickReverse(34, 34, repeat=5, wait = True)
    location = CheckLocation()

    if destination in ["theories", "students", "main"]:
        i = 0
        while location != destination and i < 5:
            clickReverse(1137, 86, wait = True)
            location = CheckLocation()
            i += 1
        if CheckLocation() != destination:
            print(f"Going from {orig} to {destination} but got lost")
            return False
        if i > 5:
            print("You probably haven't unlocked theories or students yet. Please delete")
    
    elif destination == "arrow":
        if not GiftAvailable():
            raise AssertionError("We don't know where we are!")
        # Minigame button, arrow puzzle, hard
        clickReverse(1137, 405, wait = True)
        clickReverse(840, 372, wait = True)
        clickReverse(689, 409, wait = True)

    # Checking
    if CheckLocation() != destination:
        print(f"Going from {orig} to {destination} but got lost")
        return False
    return True


def IsOnTheoryx1(Image=None):
    if not IsOnTheories(Image):
        return False
    checker = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 207, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 69, 149, 242, 229, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 248, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 216, 131, 255, 229, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 229, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 248, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 229, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 255, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 229, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 245, 5, 0, 0, 0, 0, 160, 244, 240, 239, 244,
                         243, 0, 0, 121, 246, 240, 241, 248, 143, 0, 0, 0, 0, 0, 0, 255, 229, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 199, 214, 0, 0, 0, 0, 0, 5, 35, 143, 254, 255, 80, 0, 0, 20, 204, 246, 147, 58, 8, 0, 0, 0, 0, 0, 0, 255, 229,
                         0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 201, 0, 0, 0, 0, 0, 0, 0, 0, 155, 255, 153, 0, 0, 13, 211, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 229, 0, 0,
                         0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 190, 0, 0, 0, 0, 0, 0, 0, 0, 5, 200,
                         254, 99, 0, 166, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 229, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 232,
                         241, 143, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 229, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
                         251, 241, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 229, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 225, 255, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 229, 0, 0, 0]])
    coordinates = (556, 131, 568, 90)
    return Checker(coordinates, checker, Image)

if __name__ == "__main__":
    # coordinates = (556, 131, 568, 90)
    # Image = take_screenshot('screen.png')
    # im = cropReverse(coordinates[0], coordinates[1],
    #                  coordinates[2], coordinates[3], Image)
    # im = im[:, :, 0]
    # print2Darray(im)
    print(IsOnStudents())